<?xml version="1.0"?>
<!DOCTYPE article PUBLIC  "-//OASIS//DTD DocBook XML V4.1.2//EN"
    "http://docbook.org/xml/4.1.2/docbookx.dtd" [
<!ENTITY howto         "http://tldp.org/HOWTO/">
<!ENTITY mini-howto    "http://tldp.org/HOWTO/mini/">
<!ENTITY home          "http://www.catb.org/~esr/">
]>

<article>
<articleinfo>
  <title>COM de Desmitificació de DocBook</title>

  <author>
     <firstname>Eric</firstname>
     <surname>Raymond</surname>
     <affiliation>
        <address>
           <email>esr@thyrsus.com</email>
        </address>
     </affiliation>
  </author>

  <revhistory>
     <revision>
	<revnumber>v1.6</revnumber>
	<date>2010-09-14</date>
	<authorinitials>esr</authorinitials>
	<revremark>
	   Actualització principal. dblatex en realitat funciona per a
	   la producció de PDF.  Descriu asciidoc.
	</revremark>
     </revision>
     <revision>
	<revnumber>v1.5</revnumber>
	<date>2006-10-13</date>
	<authorinitials>esr</authorinitials>
	<revremark>
	   Actualització principal.  Getox sembla estar mort, FOP una
	   mica més extens.
	</revremark>
     </revision>
     <revision>
	<revnumber>v1.4</revnumber>
	<date>2004-10-28</date>
	<authorinitials>esr</authorinitials>
	<revremark>
	   Actualització menor i canvi de llicència.
	</revremark>
     </revision>
     <revision>
	<revnumber>v1.3</revnumber>
	<date>2004-02-27</date>
	<authorinitials>esr</authorinitials>
	<revremark>
	   Afegits apuntadors a dos edit.
	</revremark>
     </revision>
     <revision>
	<revnumber>v1.2</revnumber>
	<date>2003-02-17</date>
	<authorinitials>esr</authorinitials>
	 <revremark>
	   Reordenació per a ajornar referències a SGML fins després
	   d'haver-lo introduit.
	</revremark>
     </revision>
     <revision>
	<revnumber>v1.1</revnumber>
	<date>2002-10-01</date>
	<authorinitials>esr</authorinitials>
	<revremark>
	   Correcció d'una representació enganyosa de la posició de FSF.
	   Afegit un apuntador al DocBook FAQ.
	</revremark>
     </revision>
     <revision>
	<revnumber>v1.0</revnumber>
	<date>2002-09-20</date>
	<authorinitials>esr</authorinitials>
	 <revremark>
	   Versió Inicial.
	</revremark>
     </revision>
  </revhistory>

  <legalnotice>
    <title>Copyright</title>
    <para>Està permesa la copia, distribució i/o modificació d'aquest
    document baix els termes de la
    <ulink url='http://creativecommons.org/licenses/by/2.0/'>Creative Commons Attribution License,</ulink>
    versió 2.0.</para>
  </legalnotice>

  <abstract><para> Este COM intenta aclarir la boira i misteri que
  envolta el sistema d'etiquetatge DocBook i els ferraments que van
  amb ell.  Està adreçat a autors de documentació tècnica per a
  projectes de font oberta acollits a Linux, però hauria de resultar
  útil també a persones que en componen documents d'altres tipus a
  altres Unixos.
  </para></abstract>

</articleinfo>

<sect1 id="intro"><title>Introducció</title>

<para>La immensa majoria de projectes de font oberta estàn convergint
a DocBook com a format estàndar per a la seua documentació &mdash;
projectes incloent el nucli Linux, GNOME, KDE, Samba, i el Linux
Documentation Project.  Els defensors de l'"etiquetatge estructurat"
bastat en XML (com a oposat al més vell estil d'"etiquetatge de
presentació" exemplificat per troff, Tex, i Texinfo) sembla ser que
han guanyat la batalla teòrica.  Vostè pot generar etiquetatge de
presentació a partir de etiquetatge estructurat, però anar en l'altra
direcció és molt difícil.</para>

<para>No obstant això, molta confusió envolta a DocBook i els
programes que el suporten.  Els seus devots parlen un argot què és
dens i prohibitiu fins i tot per als estàndards de la informàtica, que
es passeja entre acrònims que no tenen una relació òbvia amb les coses
que vostè necessita fer per a escriure etiquetatge i fer-ne HTML o
Postscript.  Els estàndards XML i els papers tècnics són notablement
foscos.</para>

<para>Este HOWTO intentarà aclarir els misteris principals que
envolten DocBook i la seua aplicació per a documentació de font oberta
&mdash; tant els tècnics com els polítics.  El nostre objectiu és
equipar-lo per a que entenga no només allò que necessita per a fer
documents, sinò per què el procés és tan complexe &mdash; i com
s'espera que canvie a mesura que nous ferraments relacionats amb
DocBook estiguen disponibles.</para>

</sect1>
<sect1><title>Per què preocupar-se de DocBook?</title>

<para>Hi ha dos possibilitats que fan de Docbook algo realment
interessant.  Una és la <emphasis>renderització multimodal</emphasis>
i l'altra són les <emphasis>bases de dades consultables de
documencaió</emphasis>.</para>

<para>La renderització multimodal és la possibilitat més senzilla i el
terme més proper; és l'habilitat d'escriure un document en un únic
format mestre que pot rendeitzar-se en moltíssims modes de
visualització diferents (particulament ambdós, HTML per a la
visualització en línia i Postscript per a eixida impresa d'alta
qualitat).  Aquesta capacitat està molt ben implementada ara.</para>

<para><emphasis>Bases de dades consultables de documentació</emphasis>
és l'abreviatura per a la possibilitat de que DocBook ens podria
ajudar a portar-nos a un món en què tota la documentació al seu
sistema operatiu de font oberta és una rica, consultable,
hiperenllaçada i cross-indexed (malgrat estar dispersa en diferents
formats a múltiples llocs com ho està ara).</para>

<para>Idealment, cada vegada que vostè instal·la un paquet de
programari a la seua màquina, engeristraria la seua documentació
DocBook dins del catèleg del seu sistema.  HTML, adequadament indexat
i cross-linked a l'HTML en la resta del seu catàleg, seria generada.
La documentació del nou paquet estaria aleshores disponible a través
del seu navegador.  Tota la seua documentació seria consultable a
través d'una interfície semblant a un bon motor Web de cerca.</para>

<para>HTML per si sol no és un format suficientment ric per a
portar-nos a eixe món.  Per nomenar només una mancança, vostè no por
declarar explícitament entrades d'índex en
HTML. DocBook <emphasis>sí</emphasis> té la riquesa semàntica per a
suportar bases de dades de documentació estructurada.  Fundamentalment
aquesta és la raó per la que molts projectes l'estàn adoptant.</para>

<para>DocBook té el vicis que van amb les seves virtuds.  Algunes
persones el troben desagradable, pesant, i massa detallat com per a
ser còmode com a format de composició.  Això està bé; mentre les eines
d'etiquetatge que els agraden (coses com asciidoc, Perl POD o GNU
Texinfo) puguen generar DocBook a partir dels seus back-ends, encara
podem obtindre allò que volem.  No importa si tothom escriu en DocBook
o no &mdash; mentre es converteix en el format comú d'intercanvi de
documents que tothom utilitza, seguirem obtenint bases de dades
consultables de documentació.</para>

</sect1>
<sect1><title>Etiquetatge Estructural: una introducció</title>

<para>Els llenguatges més antics com Tex, Texinfo, i Troff
suportaven <firstterm>etiquetatge de
presentació</firstterm><indexterm><primary>etiquetatge de presentació
</primary></indexterm>.  En aquests sistemes, les instruccions que es
donaven eren sobre l'aparença i la maquetació física del text (canvis
de font, canvis en el sagnat, aquesta mena de coses).</para>

<para>L'etiquetatge de presentació era adequat mentre el teu únic
objectiu era imprimir a un únic medi o tipus de dispositiu.
Tanmateix, alcançaves els seus límits, quan volies etiquetar un
document per a que (a) poguera ser formatat per a medis de
visualització molt diferents (com impresió contra visualització Web),
o (b) volíes que suportara consultes i indexar-lo segons la seua
estructura (com probablement voldràs fer si, per exemple, estàs
incorporant-lo a un sistema d'hipertext).</para>

<para>Per a suportar aquestes capacitats adequadament, necessites un sistema 
<firstterm>estiquetatge
estructural</firstterm><indexterm><primary>etiquetatge
estructural</primary></indexterm>.  A l'etiqeutatge estructural,
descrius no l'aparença física del document, sinò les propietats
lògiques de les seues parts.</para>

<para>A mode d'exemple: A un lleguatge d'etiquetatge de presentació,
si vols emfatitzar una paraula, vostè podria instruir al formatejador
per a que la pose en negreta.  A
<citerefentry><refentrytitle>troff</refentrytitle><manvolnum>1</manvolnum></citerefentry>
açò seria alguna cosa com:</para>

<programlisting>
All your base
.B are
belong to us!
</programlisting>

<para>En un llenguatge de marques estructural, vostè li diria al
formatejador que emfatitzara la paraula:</para>

<programlisting>
All your base &lt;emphasis&gt;are&lt;/emphasis&gt; belong to us!
</programlisting>

<para> Els "&lt;emphasis&gt;" i &lt;/emphasis&gt; en la línia de dalt
s'anomenen <firstterm>etiquetes de marcatge
</firstterm><indexterm><primary>etiquets de
marcatge</primary></indexterm>, o
senzillament <firstterm>etiquetes</firstterm>, per abreviar.  Són les
instruccions per al seu formatejador.</para>

<para>A un llenguatge de marcatge estructural, l'aparença física del document final es controlaria mitjançant un <firstterm>full d'estils</firstterm>
<indexterm><primary>full d'estils</primary></indexterm>.  És el full
d'estils qui li diria al formatejador "representa emphasis com a un
canvi de font a negreta".  Un avantatge dels llenguatges de marcatge
estructural és que que canviant el full d'estils vostè pot canviar
globalment la presentació del document (per a utilitzar diferents
fonts, per exemple) sense haver de canviar totes les instàncies
individuals de (diguem) <markup>.B</markup> al propi document.</para>

</sect1>
<sect1><title>Definicions de Tipus de Document</title>

<para>(Note: to keep the explanation simple, most of this
section is going to tell some lies, mainly by omitting a lot of 
history.  Truthfulness will be fully restored in a 
<link linkend="sgml">following section</link>.)</para>

<para>DocBook is a structural-level markup language.  Specifically, it
is a dialect of XML.  A DocBook document is a hunk of XML that uses
XML tags for structural markup.</para>

 <para>In order for a document formatter to apply a stylesheet to your
document and make it look good, it needs to know things about the
overall structure of your document.  For example, it needs to know
that a book manuscript normally consists of front matter, a sequence
of chapters, and back matter in order to physically format chapter
headers properly.  In order for it to know this sort of thing, you
need to give it a <firstterm>Document Type
Definition</firstterm><indexterm><primary>Document Type
Definition</primary><secondary>DTD</secondary></indexterm> or DTD. The
DTD tells your formatter what sorts of elements can be in the document
structure, and in what orders they can appear.</para>

<para>What we mean by calling DocBook an `application' of XML is
actually that DocBook is a DTD &mdash; a rather large DTD, with
somewhere around 400 tags in it.</para>

<para>Lurking behind DocBook is a kind of program called a
<firstterm>validating parser</firstterm><indexterm><primary>validating
parser</primary></indexterm>.When you format a DocBook document, the
first step is to pass it through a validating parser (the front end of
the DocBook formatter).  This program checks your document against the
DocBook DTD to make sure you aren't breaking any of the DTD's
structural rules (otherwise the back end of the formatter, the part
that applies your style sheet, might become quite confused).</para>

<para>The validating parser will either bomb out, giving you error
messages about places where the document structure is broken, or translate
the document into a stream of <firstterm>formatting events</firstterm>
which the parser back end combines with the information in your stylesheet
to produce formatted output</para>

<para>Here is a diagram of the whole process:</para>

<mediaobject>
<imageobject> <imagedata fileref="figure1.png" format="PNG"/></imageobject>
</mediaobject>

<para>The part of the diagram inside the dotted box is your formatting
software, or <firstterm>toolchain</firstterm>. Besides the obvious and
visible input to the formatter (the document source) you'll need to
keep the two `hidden' inputs of the formatter (DTD and stylesheet) in
mind to understand what follows.</para>
</sect1>
<sect1><title>Other DTDs</title>

<para>A brief digression into other DTDs may help make clear what parts of
the previous section were specific to DocBook and what parts are general to
all structural-markup languages.</para>

<para><ulink url="http://www.tei-c.org/">TEI</ulink> (Text Encoding
Initiative) is a large, elaborate DTD used primarily in academia for
computer transcription of literary texts.  TEI's Unix-based toolchains
use many of the same tools that are involved with DocBook, but with
different stylesheets and (of course) a different DTD.</para>

<para>XHTML, the latest version of HTML, is also an XML application
described by a DTD, which explains the family resemblance between
XHTML and DocBook tags. The XHTML toolchain consists of web browsers
and a number of ad-hoc HTML-to-print utilities.</para>

<para>Many other XML DTDs are maintained to help people exchange
structured information in fields as diverse as bioinformatics and
banking.  You can look at a <ulink
url="http://www.xml.com/pub/rg/DTD_Repositories"> list of
repositories</ulink> to get some idea of the variety out
there.</para>

</sect1>
<sect1><title>The DocBook toolchain</title>

<para>The easiest way to format and render XML-DocBook documents is to
use the <application>xmlto</application> toolchain.  This ships with
Red Hat; Debian users can get it with the command <command>apt-get
install xmlto</command>.</para>

<para>Normally, what you'll do to make XHTML from your
DocBook sources will look like this:</para>

<screen>
bash$ xmlto xhtml foo.xml
bash$ ls *.html
ar01s02.html ar01s03.html ar01s04.html index.html
</screen>

<para>In this example, you converted an XML-Docbook  document named 
<filename>foo.xml</filename> with three top-level sections into an
index page and two parts.  Making one big page is just as easy:</para>

<screen>
bash$ xmlto xhtml-nochunks foo.xml
bash$ ls *.html
foo.html
</screen>

<para>Finally, here is how you make PDF for printing:</para>

<screen>
bash$ dblatex foo.xml       # To make PDF
bash$ ls *.pdf
foo.pdf
</screen>

<para>Some older versions of <command>xmlto</command> may be 
more verbose, emitting noise like "Converting to XHTML" and so forth.</para>

<para>To turn your documents into HTML or PDF, you need an
engine that can apply the combination of DocBook DTD and 
a suitable stylesheet to your document.  Here is how the 
open-source tools for doing this fit together:</para>

<mediaobject>
<imageobject> <imagedata fileref="figure2.png" format="PNG"/></imageobject>
<caption>
  <para>Present-day XML-DocBook toolchain</para>
</caption>
</mediaobject>

<para>Parsing your document and applying the stylesheet transformation
will be handled by one of three programs.  The most likely one is
<application>xsltproc</application><indexterm><primary>xsltproc</primary></indexterm>.  The other
possibilities are two Java programs,
<application>Saxon</application><indexterm><primary>Saxon</primary></indexterm>
and
<application>Xalan</application><indexterm><primary>Xalan</primary></indexterm>,</para>

<para>It is relatively easy to generate high-quality XHTML from
DocBook; the fact that XHTML is simply another XML DTD helps a lot.
Translation to HTML is done by applying a rather simple stylesheet,
and that's the end of the story.  RTF is also simple to generate in
this way, and from XHTML or RTF it's easy to generate a flat ASCII
text approximation in a pinch.</para>

<para>The awkward case is print.  Generating high-quality printed
output (which means, in practice, Adobe's
PDF<indexterm><primary>PDF</primary></indexterm> or Portable Document
Format, a packaged form of PostScript) is difficult.  Doing it right
requires algorithmically duplicating the delicate judgments of a human
typesetter moving from content to presentation level.</para>

<para>So, first, a stylesheet translates Docbook's structural markup
into another dialect of XML &mdash;
FO<indexterm><primary>FO</primary></indexterm>
(Formatting Objects).  FO markup is very much presentation-level; you
can think of it as a sort of XML functional equivalent of troff.  It
has to be translated to Postscript for packaging in a PDF.</para>

<para>In the toolchain shipped with most present-day Linux
distributions, this job is best handled by a program called
<application>dblatex</application><indexterm><primary>dblatex</primary></indexterm>
(this obsoletes the older passivetex package that previous versions of
tis HOWTO described).</para>

<para><command>dblatex</command> translates the formatting objects
generated by <command>xsltproc</command> into Donald Knuth's TeX
language.  TeX was one of the earliest open-source projects, an old
but powerful presentation-level formatting language much beloved of
mathematicians (to whom it provides particulaly elaborate facilities
for describing mathematical notation).  TeX is also famously good at
basic typesetting tasks like kerning, line filling, and hyphenating.
TeX's output is then massaged into PDF.</para>

<para>If you think this bucket chain of XML to Tex macros to
PDF sounds like an awkward kludge, you're right.  It clanks, it
wheezes, and it has ugly warts.  Fonts are a significant problem,
since XML and TeX and PDF have very different models of how fonts
work; also, handling internationalization and localization is a
nightmare. About the only thing this code path has going for it is
that it works.</para>

<para>The elegant way will be <ulink
url="http://xmlgraphics.apache.org/fop/">
FOP</ulink><indexterm><primary>FOP</primary></indexterm>, a direct
FO-to-Postscript translator being developed by the Apache project.
With FOP, the internationalization problem is, if not solved, at least
well confined; XML tools handle Unicode all the way through to FOP.
Glyph to font mapping is also strictly FOP's problem.  The only
trouble with this approach is that it entirely doesn't work yet.  As
of October 2010 FOP is at 1.0 and usable, but with rough edges and
missing features. I recommed dblatex for production use.</para>

<para>Here is what the FOP toolchain looks like:</para>

<mediaobject>
<imageobject> <imagedata fileref="figure3.png" format="PNG"/></imageobject>
<caption>
<para>Future XML-DocBook toolchain with FOP.</para>
</caption>
</mediaobject>

</sect1>
<sect1><title>asciidoc</title>

<para>There is a relatively new tool called <ulink
url="http://www.methods.co.nz/asciidoc/">asciidoc</ulink> that tackles
several of the problems associated with DocBook rather effectively.</para>

<para>The <command>asciidoc</command> tool accepts a simple,
lightweight syntax resembling wiki markups and turns it into various
output formats using DocBook as an intermediate stage.  The asciidoc
markup is easier to compose in than DocBook itself, and serves
as its own best rendering in flat ASCII.</para>

<para>Printing support in <command>asciidoc</command> is through an 
experimental LaTeX back end.  It is most useful for writing short
to medium-length documents for World Wide Web distribution.</para>

</sect1>
<sect1><title>Who are the projects and the players?</title>

<para>The DocBook DTD itself is maintained by the DocBook Technical
Committee, headed by Norman Walsh.  Norm is the principal author of
the DocBook stylesheets, a man who has focused remarkable energy and
talent over many years on the extremely complex problems DocBook
addresses.  He is as universally respected in the DocBook
community as Linus Torvalds is in the Linux world.</para>

<para><ulink url="http://xmlsoft.org/XSLT/">libxslt</ulink> is a C
library that interprets XSLT, applying stylesheets to XML documents.
It includes a wrapper program, <command>xsltproc</command>, that can be
used as an XML formatter.  The code was written by Daniel Veillard
under the auspices of the GNOME project, but does not require any
GNOME code to run.  I hear it's blazingly fast compared to the 
Java alternatives, not a surprising claim.</para>

<para><ulink url="http://cyberelk.net/tim/xmlto/">xmlto</ulink> is the
user interface of the XML toolchain that most Linuxes.  It's written
and maintained by Tim Waugh.</para>

<para><ulink url="http://users.iclway.co.uk/mhkay/saxon/">Saxon</ulink>
and <ulink url="http://xml.apache.org/xalan-j/">Xalan</ulink> are Java
programs that interpret XSLT.  Saxon seems to be designed to work
under Windows.  Xalan is part of the XML Apache project and native to
Linux and BSD; it's designed to work with FOP.</para>

<para><ulink url="http://xml.apache.org/fop/">FOP</ulink> translates
XML Formatting Objects to PDF.  It is part of the Apache XML project
and is designed to work with Xalan.</para>

<para><ulink url="http://www.methods.co.nz/asciidoc/">asciidoc</ulink> 
translates its own lightweight markup to DocBook, and thence to various
output formats.</para>

</sect1>
<sect1><title>Migration tools</title>

<para>The second biggest problem with DocBook is the effort needed to
convert old-style presentation markup to DocBook markup.  Human beings
can usually parse the presentation of a document into logical
structure automatically, because (for example) they can tell from 
context when an italic font means `emphasis' and when it means
something else such as `this is a foreign phrase'.</para>

<para>Somehow, in converting documents to DocBook, those
sorts of distinctions need to be made explicit.  Sometimes
they're present in the old markup; often they are not, and the
missing  structural information has to be either deduced by 
clever heuristics or added by a human.</para>

<para>Here is a summary of the state of conversion tools from
various other formats:</para>

<variablelist>
<varlistentry>
<term>GNU Texinfo</term>
<listitem>
<para>The Free Software Foundation has made a policy decision to
support DocBook as an interchange format.  Texinfo has enough
structure to make reasonably good automatic conversion possible, and
the 4.x versions of <command>makeinfo</command> feature a
<option>&#x2d;&#x2d;docbook</option> switch that generates DocBook.
More at the <ulink
url="http://www.gnu.org/directory/texinfo.html">makeinfo project
page</ulink>.</para>
</listitem>
</varlistentry>

<varlistentry>
<term>POD</term>
<listitem>
<para>There is a <ulink
url="http://www.cpan.org/modules/by-module/Pod/">POD::DocBook</ulink>
module that translates Plain Old Documentation markup to DocBook.  It
claims to translate every POD tag except the L&lt;&gt; italic tag.
The man page also says "Nested =over/=back lists are not supported
within DocBook." but notes that the module has been heavily
tested.</para>
</listitem>
</varlistentry>

<varlistentry>
<term>LaTeX</term>
<listitem>
<para>LaTeX is a (mostly) structural markup macro language built on
top of the TeX formatter.  There is a project called <ulink
url="http://www.lrz-muenchen.de/services/software/sonstiges/tex4ht/mn.html">
TeX4ht</ulink> that (according to the author of PassiveTeX) can
generate DocBook from LaTeX.</para>
</listitem>
</varlistentry>

<varlistentry>
<term>man pages and other troff-based markups</term>
<listitem>
<para>This is generally considered the biggest and nastiest conversion
problem.  And indeed, the basic
<citerefentry><refentrytitle>troff</refentrytitle>
<manvolnum>1</manvolnum></citerefentry> markup is at too low a presentation
level for automatic conversion tools to do much of any good.  However,
the gloom in the picture lightens significantly if we consider
translation from sources of documents written in macro packages like
<citerefentry><refentrytitle>man</refentrytitle>
<manvolnum>7</manvolnum></citerefentry>.  These have enough structural
features for automatic translation to get some traction.</para>

<para>I wrote a tool to do this myself, because I couldn't find
anything else that did a half-decent job of it (and the problem is
interesting).  It's called <ulink
url="&home;/doclifter/">doclifter</ulink>.  It will
translate to either SGML or XML DocBook from
<citerefentry><refentrytitle>man</refentrytitle>
<manvolnum>7</manvolnum></citerefentry>,
<citerefentry><refentrytitle>mdoc</refentrytitle>
<manvolnum>7</manvolnum></citerefentry>,
<citerefentry><refentrytitle>ms</refentrytitle>
<manvolnum>7</manvolnum></citerefentry>, or
<citerefentry><refentrytitle>me</refentrytitle>
<manvolnum>7</manvolnum></citerefentry> macros.  See the documentation
for details.</para>
</listitem>
</varlistentry>
</variablelist>

</sect1>
<sect1><title>Editing tools</title>

<para>Most people still hack DocBook tags by hand using either vi or
emacs. There's an Nxml mode that ships with Emacs and is automatically
invoked when the editor recognizes an XMl document. It has become
pretty good; while it doesn't give GUI presentation, it does use its
knowledge of XML to highlight out-of-balance tags.  Some alternative
are summarized at the <ulink
url="http://www.emacswiki.org/emacs/CategoryXML">Emacs CategoryXML
page</ulink>.</para>

<para>There have been a number of attempts at GUI editors for DocBook, 
often with the aim of being general editors for any markup with an XML or
SGML schema.  EuroMath, MLView, Conglomerate, ThotBook are among them.
Such projects tent to stall out in alpha stage; designing a decent
UI for this task is extemely difficult.</para>

<para>Some attempts that have made it to production stage (if only
barely, in many cases) can be found at the <ulink
url="http://wiki.docbook.org/topic/DocBookAuthoringTools">DocBook
Authoring Tools page</ulink>. I have not tried using any of these.</para> 

</sect1>
<sect1><title>Hints and tricks</title>

<para>It is possible to generate an index by including an empty 
&lt;index/&gt; tag at the point in your document where you wish
it to appear.  Be warned that, as of early 2004, this facility is
still somewhat primitive.  It won't merge ranges, and the output
generated for PostScript is not yet production-quality.</para>

<para>This space is reserved for more hints and tricks.</para>

</sect1>
<sect1><title>Related standards and practices</title>

<para>The tools are coming together, if slowly, to edit and format
DocBook markup. But DocBook itself is a means, not an end.  We'll need
other standards besides DocBook itself to accomplish the
searchable-documentation-database objective I laid out at the
beginning of this document. There are two big issues: document
cataloguing and metadata.</para>

<para>The <ulink
url="http://scrollkeeper.sourceforge.net/">Scrollkeeper</ulink>
project aims directly to meet this need. It provides a simple set of
script hooks that can be used by package install and uninstall
productions to register and unregister their documentation into and
out of a shared, searchable system-wide database.</para>

<para>Scrollkeeper uses the <ulink
url="http://www.ibiblio.org/osrt/omf/">Open Metadata Format</ulink>.
This is a standard for indexing open-source documentation analogous to
a library card-catalog system.  The idea is to support rich search
facilities that use the card-catalog metadata as well as the source 
text of the documentation itself.</para>

</sect1>
<sect1 id="sgml"><title>SGML and SGML-Tools</title>

<para>In previous sections, I have thrown away a lot of DocBook's
history.  XML has an older brother,
SGML<indexterm><primary>SGML</primary></indexterm> or Standard Generalized
Markup Language.</para>

<para>Until mid-2002, no discussion of DocBook would have been
complete without a long excursion into SGML, the differences between
SGML and XML, and detailed descriptions of the SGML DocBook toolchain.
Life can be simpler now; an XML DocBook toolchain is available in open
source, works as well as the SGML toolchain ever did, and is much
easier to use.  If you don't think you'll ever have to deal with old
SGML-Docbook documents, you can skip the remainder of this
section.</para>

<sect2><title>DocBook SGML</title>

<para>DocBook was originally an SGML application, and there was an
SGML-based DocBook toolchain that is now moribund.  There are minor
differences between the DocBook SGML DTD and the DocBook XML DTD, but
for an introductory discussion we can ignore them. The only one that's
normally user-visible is that in SGML contentless tags did not need to
have a trailing slash added to them before the closing &gt;.
(Requiring the trailing / means XML parsers can be a lot simpler,
because they don't have to know about the DTD to know which opening
tags need closers.)</para>

<para>Versions of HTML up to 4.01 (before XHTML) were SGML
applications.  TEI was originally an SGML application, too.  The
groups managing all three DTDs jumped to XML for the same reason
DocBook's developers did &mdash; it's drastically simpler.  SGML was
extremely complex; unmanageably so, as it turns out.  The
specification was a dense 150 pages and it is not reliably reported
that any software ever fully implemented it.</para>

<para>The toolchain diagram I gave earlier was simplified; it
only showed the XML toolchain.  Here is the historically
correct version:</para>

<mediaobject>
<imageobject><imagedata fileref="figure4.png" format="PNG"/></imageobject>
</mediaobject>

<para>The DSSSL toolchain is what processed DocBook SGML.
Under it, a document goes from DocBook format through one of two
closely-related stylesheet engines called Jade and OpenJade.  These
turn it into a TeX-macro markup, which is processed by a package called
JadeTeX, into DVIs, which then get turned into Postscript.</para>

</sect2>
<sect2><title>SGML tools</title>

<para>The <ulink url="http://sources.redhat.com/docbook-tools/">
docbook-tools</ulink> project provides open-source tools for
converting SGML DocBook to HTML, Postscript, and other formats.  This
package is shipped with Red Hat and other Linux distributions.  It is
maintained by Mark Galassi.</para>

<para><ulink url="http://www.jclark.com/jade/">Jade</ulink> is an
engine used to apply DSSSL stylesheets to SGML documents.  It is
maintained by James Clark.</para>

<para><ulink url="http://openjade.sourceforge.net/">OpenJade</ulink>
is a community project undertaken because the founders thought James
Clark's maintainance of Jade was spotty. The docbook-tools programs
use OpenJade.</para>

<para><ulink
url="http://users.ox.ac.uk/~rahtz/passivetex/">PassiveTeX</ulink> the
package of LaTeX macros that <application>xmlto</application> uses for
producing DVI from XML-DocBook. <ulink
url="http://jadetex.sourceforge.net/">JadeTex</ulink> is the package
of LaTeX macros that OpenJade uses for producing DVI from
SGML-DocBook.</para>

</sect2>
<sect2><title>Why SGML DocBook is dead</title>

<para>The DSSSL toolchain is, as far as new development goes,
effectively dead.  The XSLT toolchain has reached production status in
mid-2002; a working version shipped in Red Hat 7.3.  It's where
DocBook developers are putting almost all of their effort.</para>

<para>The reason for the change to XML was threefold.  First,
SGML turned out to be too complicated to use; then, DSSSL turned out
to be too complicated to live with; then, significant parts of the
DSSSL toolchain turned out to be weak and irredeemably messy.</para>

<para>Relative to SGML, XML has a reduced feature set that is
sufficient for almost all purposes but much easier to understand and
build parsers for.  SGML-processing tools (such as validating parsers) have
to carry around support for a lot of features that DocBook and other
text markup systems never actually used.  Removing these features
made XML simpler and XML-processing tools faster.</para>

<para>The language used to describe SGML DTDs is sufficiently spiky
and forbidding that composing SGML DTDs was something of a black art.
XML DTDs, on the other hand, can be described in a dialect of XML
itself; there does not need to be a separate DTD language. An XML
description of an XML DTD is called a
<firstterm>schema</firstterm><indexterm><primary>schema</primary></indexterm>;
the term DTD itself will probably pass out of use as the standards for
schemas firm up.</para>

<para>But mostly the DSSSL toolchain is dead because DSSSL itself, the
SGML stylesheet description language in that toolchain, proved just too
arcane for most human beings, and made stylesheets too difficult to
write and modify. (It was a dialect of Scheme.  Your humble editor, a
LISP-head from way back, shakes his head in sad bemusement that
this should drive people away.)</para>

<para>XML fans like to sum up all these changes with <quote>XML:
tastes great, less filling.</quote></para>

</sect2>
<sect2><title>SGML-Tools</title>

<para>SGML-Tools was the name of a DTD used by the <ulink
url="http://www.linuxdoc.org">Linux Documentation Project</ulink>,
developed a few years ago when today's DocBook toolchains didn't exist.
SGML-Tools markup was simpler, but also much less flexible than
DocBook.  The original SGML-Tools formatter/DTD/stylesheet(s)
toolchain has been dead for some time now, but a successor called <ulink
url="http://sourceforge.net/projects/sgmltools-lite/">SGML-tools
Lite</ulink> is still maintained.</para>

<para>The LDP has been phasing out SGML-Tools in favor of DocBook, but
it is still possible you might take over an old HOWTO.  These can be
recognized by the identifying header "&lt;!doctype linuxdoc
system&gt;". If this happens to you, convert the thing to XML DocBook
and give the old version a quick burial.</para>
</sect2>
</sect1>

<sect1><title>References</title>

<para>One of the things that makes learning DocBook difficult is that
the sites related to it tend to overwhelm the newbie with long lists
of W3C standards, massive exercises in markup theology, and dense
thickets of abstract terminology.  We're going to try to avoid that
here by giving you just a few selected references to look at.</para>

<para>Michael Smith's <ulink
url="http://xml.oreilly.com/news/dontlearn_0701.html">
Take My Advice: Don't Learn XML</ulink> surveys the XML world from
an angle similar to this document.</para>

<para>Norman Walsh's <citetitle>DocBook: The Definitive
Guide</citetitle> is available <ulink
url="http://www.oreilly.com/catalog/docbook/">in print</ulink> and
<ulink url="http://www.docbook.org/tdg/en/html/docbook.html">on the
web</ulink>.  This is indeed the definitive reference, but as an
introduction or tutorial it's a disaster.  Instead, read this:</para>

<para><ulink url="http://opensource.bureau-cornavin.com/crash-course">Writing 
Documentation Using DocBook: A Crash Course</ulink>.  This is an excellent
tutorial.</para>

<para>There is an excellent <ulink
url="http://www.dpawson.co.uk/docbook/">DocBook FAQ</ulink> with a lot
of material on styling HTML output.  There is also a DocBook <ulink
url="http://docbook.org/wiki/moin.cgi">wiki</ulink>.</para>

<para>If you're writing for the Linux Documentation Project, read the
<ulink url="http://www.linuxdoc.org/LDP/LDP-Author-Guide/index.html">
LDP Author Guide</ulink>.</para>

<para>The best general introduction to SGML and XML that I've
personally read all the way through is David Megginson's <ulink
url="http://vig.pearsoned.com/store/product/0,,store-562_banner-0_isbn-0136422993,00.html">Structuring
XML Documents</ulink> (Prentice-Hall, ISBN: 0-13-642299-3).</para>

<para>For XML only, <ulink
url="http://www.oreilly.com/catalog/xmlnut2/">XML In A
Nutshell</ulink> by W. Scott Means and Elliotte <quote>Rusty</quote>
Harold is very good.</para>

<para><ulink url="http://www.ibiblio.org/xml/books/bible/">The XML
Bible</ulink> looks like a pretty comprehensive reference on XML and
related standards (including Formatting Objects).</para>

<para>Finally, the <ulink url="http://xml.coverpages.org/">The XML
Cover Pages</ulink> will take you into the jungle of XML standards
if you really want to go there.</para>

</sect1>
</article>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-namecase-general:t
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:nil
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
